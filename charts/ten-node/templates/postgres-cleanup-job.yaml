{{- if .Values.global.destructiveDeployment }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ten-node.fullname" . }}-postgres-cleanup
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "ten-node.name" . }}-postgres-cleanup
    helm.sh/chart: {{ include "ten-node.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    # This job will run before Helm installs or upgrades charts, if the flag is true.
    # Adjust weight as needed if you have other pre-install/pre-upgrade hooks.
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    {{- with .Values.cleanupJob.postgres.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ten-node.name" . }}-postgres-cleanup
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      containers:
        - name: postgres-cleaner
          image: "{{ .Values.cleanupJob.postgres.image.repository }}:{{ .Values.cleanupJob.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.cleanupJob.postgres.image.pullPolicy }}
          env:
            - name: POSTGRES_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  # Uses the secret name defined in values.yaml or defaults to '<fullname>-node-secrets'
                  name: {{ .Values.cleanupJob.postgres.postgresSecretName | default (printf "%s-node-secrets" (include "ten-node.fullname" .)) }}
                  # This is the key your external secret system creates
                  key: HOST_DB_POSTGRESHOST
            - name: PGSSLMODE
              # It's good practice to make SSL mode configurable via values.yaml
              value: {{ .Values.cleanupJob.postgres.pgSslMode | default "prefer" }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              # You might want a more robust readiness check or a short delay
              # sleep 10 
              echo "Attempting to clean PostgreSQL tables using connection URI..."
              # Pass the connection URI directly to psql
              psql "$POSTGRES_CONNECTION_URI" -f /scripts/cleanup.sql
              echo "PostgreSQL cleanup script executed."
          volumeMounts:
            - name: cleanup-sql-script
              mountPath: /scripts
      volumes:
        - name: cleanup-sql-script
          configMap:
            name: {{ include "ten-node.fullname" . }}-cleanup-sql-script
{{- end }}