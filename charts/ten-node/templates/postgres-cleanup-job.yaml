{{- if .Values.global.destructiveDeployment }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ten-node.fullname" . }}-postgres-cleanup
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "ten-node.name" . }}-postgres-cleanup
    helm.sh/chart: {{ include "ten-node.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    {{- with .Values.cleanupJob.postgres.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ten-node.name" . }}-postgres-cleanup
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      containers:
        - name: postgres-cleaner
          image: "{{ .Values.cleanupJob.postgres.image.repository }}:{{ .Values.cleanupJob.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.cleanupJob.postgres.image.pullPolicy }}
          env:
            - name: POSTGRES_CONNECTION_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cleanupJob.postgres.postgresSecretName | default (printf "%s-node-secrets" (include "ten-node.fullname" .)) }}
                  key: HOST_DB_POSTGRESHOST
            - name: PGSSLMODE
              value: {{ .Values.cleanupJob.postgres.pgSslMode | default "prefer" }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Finding databases starting with host_..."
              DBS=$(psql "$POSTGRES_CONNECTION_URI""postgres" -tAc "SELECT datname FROM pg_database WHERE datname LIKE 'host\_%'")
              for db in $DBS; do
                if [ -n "$db" ]; then
                  echo "Dropping database: $db"
                  psql "$POSTGRES_CONNECTION_URI""postgres" -c "DROP DATABASE IF EXISTS \"$db\""
                fi
              done
              echo "PostgreSQL cleanup script executed."
{{- end }}
